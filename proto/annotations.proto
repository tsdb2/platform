syntax = "proto3";

import "google/protobuf/descriptor.proto";

package tsdb2.proto;

// This field-level option specifies how a protobuf field of sub-message type is rendered in C++
// code. It only applies to optional fields and defaults to "direct" if unspecified.
//
// The following types are available:
//
//   * "direct" means the sub-message is wrapped in an `std::optional` (default behavior),
//   * "unique" means it's wrapped in an `std::unique_ptr`,
//   * "shared" means it's wrapped in an `std::shared_ptr`.
//
// This option helps break circular message dependencies that would otherwise cause C++ compilation
// failures if all the involved messages were inlined inside each other. For example, the following
// defines the protobuf equivalent of a binary tree (a recursive data structure):
//
//   syntax = "proto3";
//
//   import "proto/annotations.proto";
//
//   message TreeNode {
//     string label = 1;
//     TreeNode left = 2 [(tsdb2.proto.indirect) = INDIRECTION_UNIQUE];
//     TreeNode right = 3 [(tsdb2.proto.indirect) = INDIRECTION_UNIQUE];
//   }
//
// In order to minimize heap allocations you should ~always leave this option unspecified. Use it
// only when you need to break a circular dependency among messages. Note that a dependency cycle
// will not cause any compilation issue if one or more of the involed fields are repeated, because
// in that case the respective sub-messages are wrapped in `std::vector` which itself implies a
// level of indirection.
//
// Indirection is not applicable to required fields because both `std::unique_ptr` and
// `std::shared_ptr` are nullable, so the behavior must be well defined when e.g. a null pointer is
// serialized. If you need to break a dependency cycle you must make the indirect field optional.
enum FieldIndirectionType {
  INDIRECTION_DIRECT = 0;
  INDIRECTION_UNIQUE = 1;
  INDIRECTION_SHARED = 2;
}

// This field-level option specifies how a map field is rendered in generated code.
//
// Example:
//
//   syntax = "proto3";
//
//   import "proto/annotations.proto";
//
//   message Foo {
//     message Bar { /* ... */ }
//
//     map<int64, string> string_map = 1 [(tsdb2.proto.map_type) = MAP_TYPE_BTREE_MAP];
//     map<string, Bar> bar_map = 2 [(tsdb2.proto.map_type) = MAP_TYPE_TSDB2_TRIE_MAP];
//   }
//
// WARNING: some of the available map types are not ordered and not comparable with the less-than
// operator, as a result they will make the whole containing message not comparable with the <, <=,
// >, and >= operators. Only the == and != comparison operators will be available in such messages.
// Note that not being order-comparable will also prevent a message from being included in other
// comparable messages. The unordered map types that cause this issue are `std::unordered_map`,
// `absl::flat_hash_map`, and `absl::node_hash_map`.
//
// NOTE: the keys of a TSDB2 trie map must always be strings.
enum MapType {
  MAP_TYPE_STD_MAP = 0;
  MAP_TYPE_STD_UNORDERED_MAP = 1;
  MAP_TYPE_ABSL_FLAT_HASH_MAP = 2;
  MAP_TYPE_ABSL_NODE_HASH_MAP = 3;
  MAP_TYPE_ABSL_BTREE_MAP = 4;
  MAP_TYPE_TSDB2_FLAT_MAP = 5;
  MAP_TYPE_TSDB2_TRIE_MAP = 6;
}

extend google.protobuf.FieldOptions {
  FieldIndirectionType indirect = 71104 [targets = TARGET_TYPE_FIELD, retention = RETENTION_SOURCE];
  MapType map_type = 71105 [targets = TARGET_TYPE_FIELD, retention = RETENTION_SOURCE];
}
